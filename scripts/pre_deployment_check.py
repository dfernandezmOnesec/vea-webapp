#!/usr/bin/env python
"""
Script de verificaci√≥n pre-despliegue para VEA WebApp
Verifica que todo est√© listo para el despliegue en Azure
"""
import os
import sys
import subprocess
import importlib
from pathlib import Path
import django
from django.conf import settings
from django.core.management import execute_from_command_line

def check_python_version():
    """Verifica la versi√≥n de Python"""
    print("üêç Verificando versi√≥n de Python...")
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print(f"‚ùå Error: Se requiere Python 3.8+ (actual: {version.major}.{version.minor})")
        return False
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - OK")
    return True

def check_django_installation():
    """Verifica la instalaci√≥n de Django"""
    print("üîß Verificando instalaci√≥n de Django...")
    try:
        import django
        print(f"‚úÖ Django {django.get_version()} - OK")
        return True
    except ImportError:
        print("‚ùå Error: Django no est√° instalado")
        return False

def check_dependencies():
    """Verifica las dependencias del proyecto"""
    print("üì¶ Verificando dependencias...")
    required_packages = [
        'django',
        'azure-storage-blob',
        'django-storages',
        'pytest',
        'pytest-django'
    ]
    
    missing_packages = []
    for package in required_packages:
        try:
            importlib.import_module(package.replace('-', '_'))
            print(f"‚úÖ {package} - OK")
        except ImportError:
            print(f"‚ùå {package} - FALTANTE")
            missing_packages.append(package)
    
    if missing_packages:
        print(f"‚ùå Faltan dependencias: {', '.join(missing_packages)}")
        return False
    
    return True

def check_django_settings():
    """Verifica la configuraci√≥n de Django"""
    print("‚öôÔ∏è Verificando configuraci√≥n de Django...")
    
    # Configurar Django
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings.production')
    
    try:
        django.setup()
        print("‚úÖ Configuraci√≥n de Django - OK")
        
        # Verificar configuraciones cr√≠ticas
        critical_settings = [
            'SECRET_KEY',
            'DEBUG',
            'ALLOWED_HOSTS',
            'DATABASES',
            'STATIC_URL',
            'MEDIA_URL'
        ]
        
        for setting in critical_settings:
            if hasattr(settings, setting):
                print(f"‚úÖ {setting} - Configurado")
            else:
                print(f"‚ö†Ô∏è {setting} - No configurado")
        
        return True
    except Exception as e:
        print(f"‚ùå Error en configuraci√≥n de Django: {e}")
        return False

def check_database():
    """Verifica la conexi√≥n a la base de datos"""
    print("üóÑÔ∏è Verificando base de datos...")
    
    try:
        from django.db import connection
        with connection.cursor() as cursor:
            cursor.execute("SELECT 1")
            print("‚úÖ Conexi√≥n a base de datos - OK")
        return True
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n a base de datos: {e}")
        return False

def check_migrations():
    """Verifica el estado de las migraciones"""
    print("üîÑ Verificando migraciones...")
    
    try:
        # Verificar migraciones pendientes
        result = subprocess.run([
            'python', 'manage.py', 'showmigrations', '--list'
        ], capture_output=True, text=True, check=True)
        
        if '[X]' in result.stdout:
            print("‚úÖ Migraciones aplicadas - OK")
        else:
            print("‚ö†Ô∏è Hay migraciones pendientes")
        
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error verificando migraciones: {e}")
        return False

def check_static_files():
    """Verifica los archivos est√°ticos"""
    print("üìÅ Verificando archivos est√°ticos...")
    
    static_dirs = ['static', 'staticfiles']
    for static_dir in static_dirs:
        if Path(static_dir).exists():
            print(f"‚úÖ Directorio {static_dir} - Existe")
        else:
            print(f"‚ö†Ô∏è Directorio {static_dir} - No existe")
    
    return True

def check_tests():
    """Ejecuta las pruebas para verificar que todo funciona"""
    print("üß™ Ejecutando pruebas...")
    
    try:
        # Ejecutar pruebas unitarias r√°pidas
        result = subprocess.run([
            'python', '-m', 'pytest', 'tests/unit/', '-v', '--tb=short'
        ], capture_output=True, text=True, timeout=300)
        
        if result.returncode == 0:
            print("‚úÖ Pruebas unitarias - PASARON")
        else:
            print("‚ùå Pruebas unitarias - FALLARON")
            print(result.stdout)
            print(result.stderr)
            return False
        
        return True
    except subprocess.TimeoutExpired:
        print("‚ùå Pruebas tardaron demasiado tiempo")
        return False
    except Exception as e:
        print(f"‚ùå Error ejecutando pruebas: {e}")
        return False

def check_azure_config():
    """Verifica la configuraci√≥n de Azure"""
    print("‚òÅÔ∏è Verificando configuraci√≥n de Azure...")
    
    # Verificar archivos de configuraci√≥n de Azure
    azure_files = [
        'azure.yaml',
        'infra/main.bicep',
        'infra/main.parameters.json'
    ]
    
    for azure_file in azure_files:
        if Path(azure_file).exists():
            print(f"‚úÖ {azure_file} - Existe")
        else:
            print(f"‚ö†Ô∏è {azure_file} - No existe")
    
    # Verificar variables de entorno de Azure
    azure_env_vars = [
        'AZURE_STORAGE_CONNECTION_STRING',
        'AZURE_STORAGE_ACCOUNT_NAME',
        'AZURE_STORAGE_ACCOUNT_KEY'
    ]
    
    for env_var in azure_env_vars:
        if os.getenv(env_var):
            print(f"‚úÖ {env_var} - Configurado")
        else:
            print(f"‚ö†Ô∏è {env_var} - No configurado")
    
    return True

def check_security():
    """Verifica configuraciones de seguridad"""
    print("üîí Verificando configuraciones de seguridad...")
    
    try:
        # Verificar que DEBUG est√° en False para producci√≥n
        if settings.DEBUG:
            print("‚ö†Ô∏è DEBUG est√° en True - No recomendado para producci√≥n")
        else:
            print("‚úÖ DEBUG est√° en False - OK")
        
        # Verificar SECRET_KEY
        if settings.SECRET_KEY and settings.SECRET_KEY != 'your-secret-key-here':
            print("‚úÖ SECRET_KEY configurado - OK")
        else:
            print("‚ùå SECRET_KEY no configurado correctamente")
            return False
        
        # Verificar ALLOWED_HOSTS
        if settings.ALLOWED_HOSTS:
            print("‚úÖ ALLOWED_HOSTS configurado - OK")
        else:
            print("‚ö†Ô∏è ALLOWED_HOSTS no configurado")
        
        return True
    except Exception as e:
        print(f"‚ùå Error verificando seguridad: {e}")
        return False

def check_performance():
    """Verifica configuraciones de rendimiento"""
    print("‚ö° Verificando configuraciones de rendimiento...")
    
    try:
        # Verificar configuraci√≥n de cach√©
        if hasattr(settings, 'CACHES') and settings.CACHES:
            print("‚úÖ Cach√© configurado - OK")
        else:
            print("‚ö†Ô∏è Cach√© no configurado")
        
        # Verificar configuraci√≥n de sesiones
        if hasattr(settings, 'SESSION_ENGINE'):
            print("‚úÖ Sesiones configuradas - OK")
        else:
            print("‚ö†Ô∏è Sesiones no configuradas")
        
        return True
    except Exception as e:
        print(f"‚ùå Error verificando rendimiento: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üöÄ Iniciando verificaci√≥n pre-despliegue para VEA WebApp")
    print("=" * 60)
    
    checks = [
        check_python_version,
        check_django_installation,
        check_dependencies,
        check_django_settings,
        check_database,
        check_migrations,
        check_static_files,
        check_tests,
        check_azure_config,
        check_security,
        check_performance
    ]
    
    passed_checks = 0
    total_checks = len(checks)
    
    for check in checks:
        try:
            if check():
                passed_checks += 1
            print()
        except Exception as e:
            print(f"‚ùå Error en verificaci√≥n: {e}")
            print()
    
    print("=" * 60)
    print(f"üìä Resumen: {passed_checks}/{total_checks} verificaciones pasaron")
    
    if passed_checks == total_checks:
        print("üéâ ¬°Todo listo para el despliegue!")
        return True
    else:
        print("‚ö†Ô∏è Hay problemas que deben resolverse antes del despliegue")
        return False

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1) 